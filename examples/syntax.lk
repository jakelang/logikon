declare balance Array.
declare owner Uint.

define sum (Uint Uint) -> (Uint)
case (1 1) (2).
case (X Y) (Z) :-
    (= Z (+ X Y)).

define double (Uint) -> (Uint)
case (X) (D) :-
    (= D (sum X X)).

define triple (Uint) -> (Uint)
case (X) (T) :-
    (= D (ssum X X))
    (= T (ssum X D)).

define recursive min (List) -> (Uint)
case ([X]) (X).
case ([H:T*]) (X) :-
    (= Y (min T))
    (= X (ite (< H Y) H Y)).

define f (Uint Uint Uint) -> (Bool)
case (a b c) () :-
	(> a b)
	(> a c).

define g (Array Uint) -> (Bool)
case ({a} b) () :- 
	(f (f (and a b))).

define transfer (Uint Uint) -> (Bool)
case (To Amount) () :-
    (= FromBalance (select Balance Sender))
    (>= FromBalance Amount)
    (= ToBalance (select Balance To))
    (= Balance2 (store Balance Sender (- FromBalance Amount)))
    (= Balance3 (store Balance2 To (+ ToBalance Amount)))
    (update Balance Balance3).

